
## GENERAL echolocatoR pipeline ##

# Look the vignettes for more
#https://rajlabmssm.github.io/echolocatoR/articles/plotting_vignette.html

# Talk to Regina to try to fix



# Step 1





# load a file with all the metadata needed
# fullSS_path # Summary statistics file in vcf format and tsv extension. The first character in the first is  "#"
# TODO
#check the first character in SS. If ! "#". Add it.
# check extension. If ! tsv. Save as tsv

library(tools)
SS_check = function(file) {
  myfile = fread(file, header=TRUE)
  firstchar = substr(colnames(myfile)[1],1,1)
  extension = tools::file_ext(file)
  
  if (firstchar != "#") {
    colnames(myfile)[1] <- paste0("#", colnames(myfile)[1])
    vcf_reformat = T
  }
  if (extension != "tsv") {
    change_format = T
  }
  if (vcf_reformat | change_format) {
    print("REFORMATTING SS")
    new = gsub(extension, "tsv", file)
    fwrite(myfile, new, colnames = T, row.names = F, sep ="\t", quote = F)
    fullRS_path = new
  } else {
    print("ALL GOOD IN SS. NO CHANGES MADE")
  }
}


# fullRS_path # The path to write results. Use colochelpR::make_results_dir if the direcotry does not exist
fullRS_path <- "/mnt/rreal/RDS/RDS/acarrasco/ANALYSES_WORKSPACE/EARLY_PD/POST_GWAS/ECHOLOCATOR/RESULTS_25.3.2022"
make_results_dir <- function(results_path){
  if(!dir.exists(results_dir_path)){
    dir.create(results_dir_path)
  } else {
    print(stringr::str_c(results_dir_path, " directory already exists.."))
  }
  return(results_dir_path)
}


# top_SNPs
# File containing the genes to be analised in echolocatoR
# Locus   Gene    CHR     POS     SNP     P       Effect


# To automate this, I want to use this 
#install_github('git@github.com:oyhel/vautils.git')

#First, I filter list of SNPs according to a threshold I pass

library(tidyverse)
library(vautils)
library(rlang)
get_topSNPs(prueba, pval_col= "P-value", 
            pval_thres = pval_threshold,
            chr_col = chr_col,
            bp_col = bp_col)

get_topSNPs = function(data, pval_thres, pval_col, chr_col, bp_col) {
  chrvar <- rlang::sym(chr_col)
  bpvar <-  rlang::sym(bp_col)
  pvvar = rlang::sym(pval_col)
  
  data = data %>%
    dplyr::filter(!!pvvar <= pval_thres) %>%
    group_by(!!chrvar, !!bpvar) %>%
    dplyr::arrange(!!pval_col) %>%
    dplyr::filter(row_number() == 1)
  data
}

# Check this two sources to come up with the closest gene
#https://jef.works/blog/2016/12/06/mapping-snps-and-peaks-to-genes-in-R/
#install_github('git@github.com:oyhel/vautils.git')






# RESULTS_DIR_NAME
# SS_TYPE ( ie : GWAS)
# STUSY_NAME



# Step 2   - Run finemap_loci


#  Step 3  - merge all finemapping results

dataset <-  file.path(,"results/GWAS/Nalls23andMe_2019/")
merged_dat <- echolocatoR::merge_finemapping_results(dataset = dataset,
                                                     minimum_support = 0)






# Then we use some coe for plotting

library(tidyverse)
chrom_col = "CHR",
position_col = "BP"

top_SNPs <- import_topSNPs(
  # topSS = "~/Desktop/Fine_Mapping/Data/GWAS/Nalls23andMe_2019/Nalls2019_TableS2.xlsx",
  topSS = Nalls_top_SNPs,
  munge = FALSE,
  ref_genome = "GRCH37", 
  chrom_col = "CHR",
  position_col = "BP",
  pval_col="P, all studies", 
  effect_col="Beta, all studies", 
  gene_col="Nearest Gene", 
  locus_col = "Nearest Gene",
  grouping_vars = c("Locus"),
  remove_variants = "rs34637584")



